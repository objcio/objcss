@mixin make-spacing($props: null, $sides: null, $variants: null, $negative: false) {

  $props: m p !default;
  $sides: a t r b l h v !default;
  $variants: '' '-' '--' '---' '+' '++' '+++' '0' !default;

  $props-map: (
    m: margin,
    p: padding
  );

  $sides-map: (
    a:  '',
    t:  '-top',
    r:  '-right',
    b:  '-bottom',
    l:  '-left',
    h:  ('-left' '-right'),
    v:  ('-top'  '-bottom')
  );

  // Negative selector prefix (n-) and value multiplier (-1)
  $negative-prefix:     if($negative, 'n-', '');
  $negative-multiplier: if($negative, -1, 1);

  // m or p
  @each $prop in $props {
    // 'margin' or 'padding'
    $prop-name: map-get($props-map, $prop);

    // t, r, b, h, etc.
    @each $side in $sides {
      // -top, -right, -bottom, (-left, -right), etc.
      $side-suffixes: map-get($sides-map, $side);

      // '', '-', '+', '++'
      @each $variant in $variants {
        // 1em, 0.5em, 1.5em, 2.5em
        $spacing-value: spacing($variant);
        // escaped variant name: '', '-', '\\+', '\\+\\+'
        // pluses have meaning as css selectors, so they need to be escaped
        // needs double slash because slash is to be output to the final css
        $variant-escaped: str-replace($variant, '+', '\\+');

        // selector declaration
        .#{$negative-prefix}#{$prop}#{$side}#{$variant-escaped} {

          // in case there's more than one property in the $side (h or v)
          @each $side-suffix in $side-suffixes {

            // property declaration
            #{$prop-name}#{$side-suffix}: $negative-multiplier * $spacing-value;

          }
        }
      }
    }
  }
}

// Make complete positive spacing
@include make-spacing;
// Make negative spacing for side margins, in default, +, and ++ variants
@include make-spacing($props: m, $sides: t r b l, $variants: '' '+' '++', $negative: true);
